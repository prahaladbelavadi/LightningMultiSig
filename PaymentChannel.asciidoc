= Payment Channel

== Funding Transaction

Two parties establish shared state on the blockchain with a 2-of-2 multi signature **funding transaction** `2 <PubKeyAlice> <PubKeyBob> 2 CHECKMULTISIG`.footnote:[BOLT 3, Funding Transaction Output] This P2WSH transaction is broadcasted to the entire Bitcoin network and added to the blockchain with accumulated proof of work, assuming sufficient mining fees paid. 

== Commitment Transaction

Subsequently, Alice and Bob can exchange signed **commitment transactions**footnote:[BOLT 3, Commitment Transaction] which change the value dedicated to Alice and Bob. This transaction consumes the output of the funding transaction, and creates four new outputs, one back to Alice's single signature private key, the other back to Bob's, and one for each offered and received HTLC.footnote:[BOLT 3, Commitment Transaction outputs] Initially, only Alice partially signsfootnote:[BIP 174] the the transaction and sends it to Bob, who completes the 2-of-2 multi signature and sends the fully signed transaction back to Alice. The next commitment transaction consumes the same founding transaction output, but changes the amount dedicated to the newly created outputs of Alice and Bob. These valid transactions could be broadcasted to the network and added to the blockchain, but for now they are kept occulted by Alice and Bob.

Offered HTLC output P2WSH: `DUP HASH160 <RIPEMD160(SHA256(revocationpubkey))> EQUAL IF CHECKSIG ELSE <remote_htlcpubkey> SWAO SIZE 32 Equal NOTIF Drop 2 Swap <local_htlcpubkey> 2 CHECKMULTISIG ELSE HASH160 <RIPEMD160(payment_hash)> EQUALVERIFY CHECKSIG ENDIF ENDIF`

WitnessScript: `<remotehtlcsig> <payment_preimage>`

If a revoked commitment transaction is published, the WitnessScript `<revocation_sig> <payment_preimage>` can spend the output immediately.

It has to be ensured, that a old state of the channel is invalidated with the most current commitment transaction. Only the most up to date state must be possible to redeem on the base layer blockchain. There are several different **update and revocation mechanisms** with accoring thread models and security assumptions:

=== Timelocks 

can be used to solve the issue of publishing an old state, and disconnecting peers. The first commitment transaction has a `CHECKSEQUENCEVERIFY = 4320` [30 days] and all subsequent update transaction have a shorter nLockTime value. The most recent transaction can thus be broadcasted the earliest, prior to any old channel state. When `NLOCKTIME`is used, the channel has a limited lifetime, but with `CHECKSEQUENCEVERIFY` countdown starts only with the publishing of the closing transaction. If Bob disconnects his node, Alice can close the payment channel without Bob's signature after `CHECKSEQUENCEVERIFY` expires, even old channel states.

=== Asymmetric Revocable Commitments

is another update mechanism, where Alice and Bob collaboratively generate two asymmetric commitment transaction. Alice has a transaction with one Input: `2-of-2 funding output, signed by Bob` and Output 0 <nValueAlice>: `<PubKeyAlice>` and Output 1 <nValueBob>: `IF <Revocation Public Key> ELSE <4320 blocks> CHECKSEQUENCEVERIFY DROP <PubKeyBob> CHECKSIG`. 

Bob has a different transaction with one Input: `2-of-2 funding output, signed by Alice` and Output 0 <nValueBob>: `<PubKeyBob>` and Output 1 <nValueAlice>: `IF <Revocation Public Key> ELSE <4320 blocks> CHECKSEQUENCEVERIFY DROP <PubKeyAlice> ENDIF CHECKSIG`.

The revocable key is split in two secrets, similar to 2-of-2 multi signature based on elliptical curve arithmetics. When Bob sends funds to Alice, Alice has to revoke the old commitment transaction by revealing her secret to Bob, before Bob agrees to sign the new state. If Alice would try to cheat and broadcast an old state, Bob can become active and use both paths of the revocation key to redeem Alice's delayed output. Alice only has one half of the revocation key and can only redeem her output after the 4320 blocks. With each state update, both exchange the new commitment transactions, and the revocation secret. 

== Closing Transaction

After Alice and Bob have done sufficient payments, they can cooperatively close this payment channel, by broadcasting the final settlement transaction to the network. This cooperative **closing transaction** has a witness script `0 <signature1> <signature2> 2 <PubKey1> <PubKey2> 2 CHECKMULTISIG` and can specify any new ScriptPubKey in the output. Further, there is an option to unilaterally close the channel if one of the peers disconnects.

The block chain footprint of potentially millions of off-chain transactions can be reduced to only the opening and closing transaction. This is increasing throughput, decreasing latency and enhancing privacy.
